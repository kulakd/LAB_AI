// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 13:57 on niedziela, 4 czerwca 2023.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_losers has executed. Set this to false to force re-execution of Changed_losers</summary>
		public bool Changed_losers_isDone;
		/// <summary>True if Changed_losers_numberOfIterations_winners has executed. Set this to false to force re-execution of Changed_losers_numberOfIterations_winners</summary>
		public bool Changed_losers_numberOfIterations_winners_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_losers_winners has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_losers_winners</summary>
		public bool Changed_numberOfIterationsDecreased_Init_losers_winners_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_losers_winners has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_losers_winners</summary>
		public bool Changed_numberOfIterationsDecreased_Init_losers_winners_isInitialised;
		/// <summary>True if Changed_winners has executed. Set this to false to force re-execution of Changed_winners</summary>
		public bool Changed_winners_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the losers property</summary>
		private int[] losers_field;
		/// <summary>Message to marginal of 'losers'</summary>
		public PointMass<int[]> losers_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionStructArray<Gaussian,double> playerSkills_itemlosers_gameRange__B;
		public DistributionStructArray<Gaussian,double> playerSkills_itemwinners_gameRange__B;
		/// <summary>Message to marginal of 'playerSkills'</summary>
		public DistributionStructArray<Gaussian,double> playerSkills_marginal_F;
		/// <summary>Messages from uses of 'playerSkills_use'</summary>
		public DistributionStructArray<Gaussian,double>[] playerSkills_uses_B;
		/// <summary>Field backing the winners property</summary>
		private int[] winners_field;
		/// <summary>Message to marginal of 'winners'</summary>
		public PointMass<int[]> winners_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'losers'</summary>
		public int[] losers
		{
			get {
				return this.losers_field;
			}
			set {
				if ((value!=null)&&(value.Length!=6)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6)+" was expected for variable \'losers\'");
				}
				this.losers_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_losers_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_losers_winners_isInitialised = false;
				this.Changed_losers_numberOfIterations_winners_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'winners'</summary>
		public int[] winners
		{
			get {
				return this.winners_field;
			}
			set {
				if ((value!=null)&&(value.Length!=6)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6)+" was expected for variable \'winners\'");
				}
				this.winners_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_winners_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_losers_winners_isInitialised = false;
				this.Changed_losers_numberOfIterations_winners_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of losers</summary>
		private void Changed_losers()
		{
			if (this.Changed_losers_isDone) {
				return ;
			}
			// Create array for 'losers_marginal' Forwards messages.
			this.losers_marginal_F = new PointMass<int[]>(this.losers);
			// Message to 'losers_marginal' from DerivedVariable factor
			this.losers_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.losers, this.losers_marginal_F);
			this.Changed_losers_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of losers and numberOfIterations and winners</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_losers_numberOfIterations_winners(int numberOfIterations)
		{
			if (this.Changed_losers_numberOfIterations_winners_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> playerSkills_F;
			Gaussian playerSkills_F_reduced;
			// Create array for 'playerSkills' Forwards messages.
			playerSkills_F = new DistributionStructArray<Gaussian,double>(5);
			// Message to 'playerSkills' from GaussianFromMeanAndVariance factor
			playerSkills_F_reduced = GaussianFromMeanAndVarianceOp.SampleAverageConditional(6.0, 15.0);
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				playerSkills_F[PlayerRange] = playerSkills_F_reduced;
				playerSkills_F[PlayerRange] = playerSkills_F_reduced;
			}
			// Create array for 'playerSkills_marginal' Forwards messages.
			this.playerSkills_marginal_F = new DistributionStructArray<Gaussian,double>(5);
			DistributionStructArray<Gaussian,double> playerSkills_use_B;
			// Create array for 'playerSkills_use' Backwards messages.
			playerSkills_use_B = new DistributionStructArray<Gaussian,double>(5);
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				playerSkills_use_B[PlayerRange] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double>[] playerSkills_uses_F;
			// Create array for 'playerSkills_uses' Forwards messages.
			playerSkills_uses_F = new DistributionStructArray<Gaussian,double>[2];
			// Create array for 'playerSkills_uses' Forwards messages.
			playerSkills_uses_F[1] = new DistributionStructArray<Gaussian,double>(5);
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				playerSkills_uses_F[1][PlayerRange] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> playerSkills_uses_F_1__marginal;
			playerSkills_uses_F_1__marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(playerSkills_uses_F[1]);
			DistributionStructArray<Gaussian,double> playerSkills_itemlosers_gameRange__F;
			// Create array for 'playerSkills_itemlosers_gameRange_' Forwards messages.
			playerSkills_itemlosers_gameRange__F = new DistributionStructArray<Gaussian,double>(6);
			for(int gameRange = 0; gameRange<6; gameRange++) {
				playerSkills_itemlosers_gameRange__F[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'loserPerformance_F'
			Gaussian[] loserPerformance_F = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				loserPerformance_F[gameRange] = Gaussian.Uniform();
			}
			// Create array for 'playerSkills_uses' Forwards messages.
			playerSkills_uses_F[0] = new DistributionStructArray<Gaussian,double>(5);
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				playerSkills_uses_F[0][PlayerRange] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> playerSkills_uses_F_0__marginal;
			playerSkills_uses_F_0__marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(playerSkills_uses_F[0]);
			DistributionStructArray<Gaussian,double> playerSkills_itemwinners_gameRange__F;
			// Create array for 'playerSkills_itemwinners_gameRange_' Forwards messages.
			playerSkills_itemwinners_gameRange__F = new DistributionStructArray<Gaussian,double>(6);
			for(int gameRange = 0; gameRange<6; gameRange++) {
				playerSkills_itemwinners_gameRange__F[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'winnerPerformance_F'
			Gaussian[] winnerPerformance_F = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				winnerPerformance_F[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble12_F'
			Gaussian[] vdouble12_F = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				vdouble12_F[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble12_B'
			Gaussian[] vdouble12_B = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				vdouble12_B[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'winnerPerformance_use_B'
			Gaussian[] winnerPerformance_use_B = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				winnerPerformance_use_B[gameRange] = Gaussian.Uniform();
			}
			// Create array for replicates of 'loserPerformance_use_B'
			Gaussian[] loserPerformance_use_B = new Gaussian[6];
			for(int gameRange = 0; gameRange<6; gameRange++) {
				loserPerformance_use_B[gameRange] = Gaussian.Uniform();
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'playerSkills_uses' from Replicate factor
				playerSkills_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.playerSkills_uses_B, playerSkills_F, 1, playerSkills_uses_F[1]);
				playerSkills_uses_F_1__marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(playerSkills_uses_F[1], this.playerSkills_uses_B[1], playerSkills_uses_F_1__marginal);
				// Message to 'playerSkills_uses' from Replicate factor
				playerSkills_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.playerSkills_uses_B, playerSkills_F, 0, playerSkills_uses_F[0]);
				playerSkills_uses_F_0__marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(playerSkills_uses_F[0], this.playerSkills_uses_B[0], playerSkills_uses_F_0__marginal);
				for(int gameRange = 0; gameRange<6; gameRange++) {
					// Message to 'playerSkills_itemlosers_gameRange_' from GetItems factor
					playerSkills_itemlosers_gameRange__F[gameRange] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.playerSkills_itemlosers_gameRange__B[gameRange], playerSkills_uses_F[1], playerSkills_uses_F_1__marginal, this.losers, gameRange, playerSkills_itemlosers_gameRange__F[gameRange]);
					// Message to 'loserPerformance' from GaussianFromMeanAndVariance factor
					loserPerformance_F[gameRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(playerSkills_itemlosers_gameRange__F[gameRange], 1.0);
					// Message to 'playerSkills_itemwinners_gameRange_' from GetItems factor
					playerSkills_itemwinners_gameRange__F[gameRange] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.playerSkills_itemwinners_gameRange__B[gameRange], playerSkills_uses_F[0], playerSkills_uses_F_0__marginal, this.winners, gameRange, playerSkills_itemwinners_gameRange__F[gameRange]);
					// Message to 'winnerPerformance' from GaussianFromMeanAndVariance factor
					winnerPerformance_F[gameRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(playerSkills_itemwinners_gameRange__F[gameRange], 1.0);
					// Message to 'vdouble12' from Difference factor
					vdouble12_F[gameRange] = DoublePlusOp.AAverageConditional(winnerPerformance_F[gameRange], loserPerformance_F[gameRange]);
					// Message to 'vdouble12' from IsPositive factor
					vdouble12_B[gameRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble12_F[gameRange]);
					// Message to 'winnerPerformance_use' from Difference factor
					winnerPerformance_use_B[gameRange] = DoublePlusOp.SumAverageConditional(vdouble12_B[gameRange], loserPerformance_F[gameRange]);
					// Message to 'playerSkills_itemwinners_gameRange_' from GaussianFromMeanAndVariance factor
					this.playerSkills_itemwinners_gameRange__B[gameRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(winnerPerformance_use_B[gameRange], 1.0);
					// Message to 'loserPerformance_use' from Difference factor
					loserPerformance_use_B[gameRange] = DoublePlusOp.BAverageConditional(winnerPerformance_F[gameRange], vdouble12_B[gameRange]);
					// Message to 'playerSkills_itemlosers_gameRange_' from GaussianFromMeanAndVariance factor
					this.playerSkills_itemlosers_gameRange__B[gameRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(loserPerformance_use_B[gameRange], 1.0);
				}
				// Message to 'playerSkills_uses' from GetItems factor
				this.playerSkills_uses_B[0] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.playerSkills_itemwinners_gameRange__B, this.winners, this.playerSkills_uses_B[0]);
				// Message to 'playerSkills_uses' from GetItems factor
				this.playerSkills_uses_B[1] = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.playerSkills_itemlosers_gameRange__B, this.losers, this.playerSkills_uses_B[1]);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'playerSkills_use' from Replicate factor
			playerSkills_use_B = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.playerSkills_uses_B, playerSkills_use_B);
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				this.playerSkills_marginal_F[PlayerRange] = Gaussian.Uniform();
				// Message to 'playerSkills_marginal' from Variable factor
				this.playerSkills_marginal_F[PlayerRange] = VariableOp.MarginalAverageConditional<Gaussian>(playerSkills_use_B[PlayerRange], playerSkills_F_reduced, this.playerSkills_marginal_F[PlayerRange]);
			}
			this.Changed_losers_numberOfIterations_winners_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to losers and winners</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_losers_winners(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_losers_winners_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_losers_winners_isInitialised)) {
				return ;
			}
			for(int PlayerRange = 0; PlayerRange<5; PlayerRange++) {
				this.playerSkills_uses_B[0][PlayerRange] = Gaussian.Uniform();
				this.playerSkills_uses_B[1][PlayerRange] = Gaussian.Uniform();
			}
			for(int gameRange = 0; gameRange<6; gameRange++) {
				this.playerSkills_itemlosers_gameRange__B[gameRange] = Gaussian.Uniform();
				this.playerSkills_itemwinners_gameRange__B[gameRange] = Gaussian.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_losers_winners_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_losers_winners_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of winners</summary>
		private void Changed_winners()
		{
			if (this.Changed_winners_isDone) {
				return ;
			}
			// Create array for 'winners_marginal' Forwards messages.
			this.winners_marginal_F = new PointMass<int[]>(this.winners);
			// Message to 'winners_marginal' from DerivedVariable factor
			this.winners_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.winners, this.winners_marginal_F);
			this.Changed_winners_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'playerSkills_uses' Backwards messages.
			this.playerSkills_uses_B = new DistributionStructArray<Gaussian,double>[2];
			// Create array for 'playerSkills_uses' Backwards messages.
			this.playerSkills_uses_B[0] = new DistributionStructArray<Gaussian,double>(5);
			// Create array for 'playerSkills_uses' Backwards messages.
			this.playerSkills_uses_B[1] = new DistributionStructArray<Gaussian,double>(5);
			// Create array for 'playerSkills_itemlosers_gameRange_' Backwards messages.
			this.playerSkills_itemlosers_gameRange__B = new DistributionStructArray<Gaussian,double>(6);
			// Create array for 'playerSkills_itemwinners_gameRange_' Backwards messages.
			this.playerSkills_itemwinners_gameRange__B = new DistributionStructArray<Gaussian,double>(6);
			bool vbool0_reduced = default(bool);
			vbool0_reduced = true;
			Constrain.Equal<bool>(true, vbool0_reduced);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_losers_winners_isDone = false;
				}
				this.Changed_losers_numberOfIterations_winners_isDone = false;
			}
			this.Changed_losers();
			this.Changed_winners();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_losers_winners(initialise);
			this.Changed_losers_numberOfIterations_winners(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="winners") {
				return this.winners;
			}
			if (variableName=="losers") {
				return this.losers;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'losers' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> LosersMarginal()
		{
			return this.losers_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="losers") {
				return this.LosersMarginal();
			}
			if (variableName=="winners") {
				return this.WinnersMarginal();
			}
			if (variableName=="playerSkills") {
				return this.PlayerSkillsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'playerSkills' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> PlayerSkillsMarginal()
		{
			return this.playerSkills_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="winners") {
				this.winners = (int[])value;
				return ;
			}
			if (variableName=="losers") {
				this.losers = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'winners' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> WinnersMarginal()
		{
			return this.winners_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
